// Utility functions for Sheets to API converter
class APIHelper {
    
    /**
     * Process the Apps Script template with actual values
     * @param {Object} config - Configuration object
     * @returns {string} Processed Apps Script code
     */
    static processTemplate(config) {
        const templatePath = chrome.runtime.getURL('templates/apps-script-template.js');
        
        return fetch(templatePath)
            .then(response => response.text())
            .then(template => {
                return template
                    .replace(/\{\{SPREADSHEET_ID\}\}/g, config.spreadsheetId)
                    .replace(/\{\{SHEET_NAME\}\}/g, config.sheetName)
                    .replace(/\{\{INCLUDE_FILTERS\}\}/g, config.includeFilters ? 'true' : 'false')
                    .replace(/\{\{SPREADSHEET_TITLE\}\}/g, config.spreadsheetTitle)
                    .replace(/\{\{API_DESCRIPTION\}\}/g, config.apiDescription || `REST API for ${config.sheetName} sheet data`);
            });
    }

    /**
     * Generate Apps Script code directly (fallback if template fetch fails)
     * @param {Object} config - Configuration object
     * @returns {string} Apps Script code
     */
    static generateAppsScriptCode(config) {
        const { spreadsheetId, sheetName, includeFilters, spreadsheetTitle } = config;

        return `
// Auto-generated Google Apps Script API for: ${spreadsheetTitle}
// Sheet: ${sheetName}
// Generated by Sheets to API Chrome Extension

var CONFIG = {
  SPREADSHEET_ID: '${spreadsheetId}',
  SHEET_NAME: '${sheetName}',
  INCLUDE_FILTERS: '${includeFilters ? 'true' : 'false'}',
  SPREADSHEET_TITLE: '${spreadsheetTitle}',
  GENERATED_BY: 'Sheets to API Chrome Extension',
  VERSION: '1.0.0'
};

function doGet(e) {
  try {
    var sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEET_NAME);
    
    if (!sheet) {
      return ContentService
        .createTextOutput(JSON.stringify({ error: 'Sheet not found' }))
        .setMimeType(ContentService.MimeType.JSON);
    }

    var data = sheet.getDataRange().getValues();
    
    if (data.length === 0) {
      return ContentService
        .createTextOutput(JSON.stringify({ data: [], count: 0 }))
        .setMimeType(ContentService.MimeType.JSON);
    }

    var headers = data[0];
    var rows = data.slice(1);
    
    var result = rows.map(function(row) {
      var obj = {};
      headers.forEach(function(header, index) {
        obj[header] = row[index] || '';
      });
      return obj;
    });

    ${includeFilters ? this.generateFilterCode() : ''}

    var response = {
      data: result,
      count: result.length,
      sheet: CONFIG.SHEET_NAME,
      spreadsheet: CONFIG.SPREADSHEET_TITLE,
      timestamp: new Date().toISOString(),
      headers: headers
    };

    return ContentService
      .createTextOutput(JSON.stringify(response))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    return ContentService
      .createTextOutput(JSON.stringify({ 
        error: 'Internal server error: ' + error.toString() 
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function doPost(e) {
  return ContentService
    .createTextOutput(JSON.stringify({ 
      status: 'ok', 
      message: 'API is running',
      sheet: CONFIG.SHEET_NAME,
      methods: ['GET']
    }))
    .setMimeType(ContentService.MimeType.JSON);
}
`;
    }

    /**
     * Generate filter code for Apps Script
     * @returns {string} Filter code
     */
    static generateFilterCode() {
        return `
    var params = e.parameter;
    
    if (params && Object.keys(params).length > 0) {
      result = result.filter(function(row) {
        return Object.keys(params).every(function(key) {
          if (key === 'limit' || key === 'offset') return true;
          
          var value = row[key];
          var filterValue = params[key];
          
          if (value === undefined || value === null) return false;
          
          return value.toString().toLowerCase().indexOf(filterValue.toLowerCase()) !== -1;
        });
      });
    }

    var limit = parseInt(params.limit) || result.length;
    var offset = parseInt(params.offset) || 0;
    
    if (offset > 0 || limit < result.length) {
      var total = result.length;
      result = result.slice(offset, offset + limit);
      response.pagination = {
        total: total,
        limit: limit,
        offset: offset,
        hasMore: offset + limit < total
      };
    }
`;
    }

    /**
     * Validate Google Apps Script project data
     * @param {Object} projectData - Project data from API
     * @returns {boolean} Is valid
     */
    static validateProjectData(projectData) {
        return projectData && 
               projectData.scriptId && 
               typeof projectData.scriptId === 'string' &&
               projectData.scriptId.length > 0;
    }

    /**
     * Validate API endpoint URL
     * @param {string} endpoint - API endpoint URL
     * @returns {boolean} Is valid
     */
    static validateEndpoint(endpoint) {
        try {
            const url = new URL(endpoint);
            return url.hostname === 'script.google.com' && 
                   url.pathname.includes('/macros/s/') &&
                   url.pathname.endsWith('/exec');
        } catch (error) {
            return false;
        }
    }

    /**
     * Generate API documentation object
     * @param {Object} config - Configuration object
     * @param {string} endpoint - API endpoint URL
     * @returns {Object} Documentation object
     */
    static generateDocumentation(config, endpoint) {
        const { spreadsheetTitle, sheetName, includeFilters } = config;
        
        return {
            title: `${spreadsheetTitle} - ${sheetName} API`,
            baseUrl: endpoint,
            description: `REST API for ${sheetName} sheet data`,
            endpoints: [
                {
                    method: 'GET',
                    path: '',
                    description: 'Get all data from the sheet',
                    parameters: [],
                    example: endpoint,
                    response: {
                        data: [{ example: 'Row data as objects' }],
                        count: 'number',
                        sheet: sheetName,
                        timestamp: 'ISO date string'
                    }
                },
                ...(includeFilters ? [{
                    method: 'GET',
                    path: '?column=value',
                    description: 'Filter data by column values',
                    parameters: [
                        { name: 'limit', type: 'number', description: 'Limit results' },
                        { name: 'offset', type: 'number', description: 'Skip results' },
                        { name: '[column]', type: 'string', description: 'Filter by any column' }
                    ],
                    example: `${endpoint}?name=John&limit=10`,
                    response: 'Same as GET with filtered data'
                }] : []),
                {
                    method: 'POST',
                    path: '',
                    description: 'Health check endpoint',
                    parameters: [],
                    example: `POST ${endpoint}`,
                    response: {
                        status: 'ok',
                        message: 'API is running',
                        sheet: sheetName
                    }
                }
            ],
            generated: new Date().toISOString()
        };
    }

    /**
     * Format error messages for user display
     * @param {Error|string} error - Error object or message
     * @returns {string} Formatted error message
     */
    static formatError(error) {
        if (typeof error === 'string') {
            return error;
        }
        
        if (error.message) {
            // Common Google API errors
            if (error.message.includes('403')) {
                return 'Permission denied. Please ensure you have access to the spreadsheet and Apps Script API.';
            }
            if (error.message.includes('404')) {
                return 'Resource not found. Please check if the spreadsheet exists and is accessible.';
            }
            if (error.message.includes('429')) {
                return 'Too many requests. Please try again in a few moments.';
            }
            if (error.message.includes('authorization')) {
                return 'Authorization failed. Please sign in again and grant necessary permissions.';
            }
            
            return error.message;
        }
        
        return 'An unexpected error occurred. Please try again.';
    }

    /**
     * Generate usage examples for the API
     * @param {string} endpoint - API endpoint URL
     * @param {boolean} includeFilters - Whether filtering is enabled
     * @returns {string} Usage examples
     */
    static generateUsageExamples(endpoint, includeFilters = false) {
        let examples = `# Get all data
GET ${endpoint}

# Health check
POST ${endpoint}`;

        if (includeFilters) {
            examples += `

# Filter by column value
GET ${endpoint}?name=John

# Multiple filters
GET ${endpoint}?status=active&category=tech

# Pagination
GET ${endpoint}?limit=10&offset=20

# Exact match (use = prefix)
GET ${endpoint}?id==123

# Numeric comparison
GET ${endpoint}?age=>25&price=<100`;
        }

        return examples;
    }

    /**
     * Extract spreadsheet ID from various Google Sheets URL formats
     * @param {string} url - Google Sheets URL
     * @returns {string|null} Spreadsheet ID or null if not found
     */
    static extractSpreadsheetId(url) {
        const patterns = [
            /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/,
            /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)\/edit/,
            /id=([a-zA-Z0-9-_]+)/
        ];

        for (const pattern of patterns) {
            const match = url.match(pattern);
            if (match) {
                return match[1];
            }
        }

        return null;
    }

    /**
     * Check if user has necessary permissions
     * @param {string} token - OAuth token
     * @returns {Promise<boolean>} Has permissions
     */
    static async checkPermissions(token) {
        try {
            const response = await fetch('https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=' + token);
            const tokenInfo = await response.json();
            
            const requiredScopes = [
                'https://www.googleapis.com/auth/spreadsheets.readonly',
                'https://www.googleapis.com/auth/script.projects'
            ];

            return requiredScopes.every(scope => 
                tokenInfo.scope && tokenInfo.scope.includes(scope)
            );
        } catch (error) {
            console.error('Permission check failed:', error);
            return false;
        }
    }

    /**
     * Sanitize sheet name for use in code
     * @param {string} sheetName - Original sheet name
     * @returns {string} Sanitized sheet name
     */
    static sanitizeSheetName(sheetName) {
        return sheetName.replace(/'/g, "\\'").replace(/"/g, '\\"');
    }

    /**
     * Generate a unique project name
     * @param {string} baseName - Base name for the project
     * @returns {string} Unique project name
     */
    static generateUniqueProjectName(baseName) {
        const timestamp = new Date().toISOString().slice(0, 19).replace(/[-:]/g, '');
        return `${baseName} - API (${timestamp})`;
    }
}

// Export for use in other modules
window.APIHelper = APIHelper; 